//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `EBSetting`.
    static let ebSetting = _R.storyboard.ebSetting()
    /// Storyboard `EBWeather`.
    static let ebWeather = _R.storyboard.ebWeather()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EBSetting", bundle: ...)`
    static func ebSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ebSetting)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EBWeather", bundle: ...)`
    static func ebWeather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ebWeather)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    /// This `R.color.background` struct is generated, and contains static references to 6 colors.
    struct background {
      /// Color `background`.
      static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/background")
      /// Color `error`.
      static let error = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/error")
      /// Color `primary_heavy_20`.
      static let primary_heavy_20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/primary_heavy_20")
      /// Color `primary`.
      static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/primary")
      /// Color `secondary`.
      static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/secondary")
      /// Color `surface`.
      static let surface = Rswift.ColorResource(bundle: R.hostingBundle, name: "background/surface")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.background, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "error", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.error, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.primary, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary_heavy_20", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary_heavy_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.primary_heavy_20, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.secondary, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "surface", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func surface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.background.surface, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    /// This `R.color.text` struct is generated, and contains static references to 4 colors.
    struct text {
      /// Color `error`.
      static let error = Rswift.ColorResource(bundle: R.hostingBundle, name: "text/error")
      /// Color `primary_light_20`.
      static let primary_light_20 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text/primary_light_20")
      /// Color `primary`.
      static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "text/primary")
      /// Color `surface`.
      static let surface = Rswift.ColorResource(bundle: R.hostingBundle, name: "text/surface")

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "error", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.text.error, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.text.primary, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "primary_light_20", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func primary_light_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.text.primary_light_20, compatibleWith: traitCollection)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// `UIColor(named: "surface", bundle: ..., traitCollection: ...)`
      @available(tvOS 11.0, *)
      @available(iOS 11.0, *)
      static func surface(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
        return UIKit.UIColor(resource: R.color.text.surface, compatibleWith: traitCollection)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.icon` struct is generated, and contains static references to 0 images.
    struct icon {
      /// This `R.image.icon.action` struct is generated, and contains static references to 6 images.
      struct action {
        /// Image `chevron_top_circle_filled`.
        static let chevron_top_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/chevron_top_circle_filled")
        /// Image `chevron_top_circle`.
        static let chevron_top_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/chevron_top_circle")
        /// Image `plus_circle_filled`.
        static let plus_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/plus_circle_filled")
        /// Image `plus_circle`.
        static let plus_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/plus_circle")
        /// Image `synchronize_circle_filled`.
        static let synchronize_circle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/synchronize_circle_filled")
        /// Image `synchronize_circle`.
        static let synchronize_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/action/synchronize_circle")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "chevron_top_circle", bundle: ..., traitCollection: ...)`
        static func chevron_top_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.chevron_top_circle, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "chevron_top_circle_filled", bundle: ..., traitCollection: ...)`
        static func chevron_top_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.chevron_top_circle_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "plus_circle", bundle: ..., traitCollection: ...)`
        static func plus_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.plus_circle, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "plus_circle_filled", bundle: ..., traitCollection: ...)`
        static func plus_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.plus_circle_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "synchronize_circle", bundle: ..., traitCollection: ...)`
        static func synchronize_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.synchronize_circle, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "synchronize_circle_filled", bundle: ..., traitCollection: ...)`
        static func synchronize_circle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.action.synchronize_circle_filled, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.icon.general` struct is generated, and contains static references to 10 images.
      struct general {
        /// Image `cross_filled`.
        static let cross_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/cross_filled")
        /// Image `cross`.
        static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/cross")
        /// Image `gear_filled`.
        static let gear_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/gear_filled")
        /// Image `gear`.
        static let gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/gear")
        /// Image `pin_filled`.
        static let pin_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/pin_filled")
        /// Image `pin`.
        static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/pin")
        /// Image `wet_filled`.
        static let wet_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/wet_filled")
        /// Image `wet`.
        static let wet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/wet")
        /// Image `wind_filled`.
        static let wind_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/wind_filled")
        /// Image `wind`.
        static let wind = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/general/wind")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
        static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.cross, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cross_filled", bundle: ..., traitCollection: ...)`
        static func cross_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.cross_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "gear", bundle: ..., traitCollection: ...)`
        static func gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.gear, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "gear_filled", bundle: ..., traitCollection: ...)`
        static func gear_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.gear_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
        static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.pin, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "pin_filled", bundle: ..., traitCollection: ...)`
        static func pin_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.pin_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "wet", bundle: ..., traitCollection: ...)`
        static func wet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.wet, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "wet_filled", bundle: ..., traitCollection: ...)`
        static func wet_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.wet_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "wind", bundle: ..., traitCollection: ...)`
        static func wind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.wind, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "wind_filled", bundle: ..., traitCollection: ...)`
        static func wind_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.general.wind_filled, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.image.icon.weather` struct is generated, and contains static references to 44 images.
      struct weather {
        /// Image `clear_day_filled`.
        static let clear_day_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/clear_day_filled")
        /// Image `clear_day`.
        static let clear_day = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/clear_day")
        /// Image `clear_night_filled`.
        static let clear_night_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/clear_night_filled")
        /// Image `clear_night`.
        static let clear_night = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/clear_night")
        /// Image `cloud_dash_filled`.
        static let cloud_dash_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloud_dash_filled")
        /// Image `cloud_dash`.
        static let cloud_dash = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloud_dash")
        /// Image `cloud_error_filled`.
        static let cloud_error_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloud_error_filled")
        /// Image `cloud_error`.
        static let cloud_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloud_error")
        /// Image `cloudy_day_filled`.
        static let cloudy_day_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_day_filled")
        /// Image `cloudy_day`.
        static let cloudy_day = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_day")
        /// Image `cloudy_filled`.
        static let cloudy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_filled")
        /// Image `cloudy_heavy_filled`.
        static let cloudy_heavy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_heavy_filled")
        /// Image `cloudy_heavy`.
        static let cloudy_heavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_heavy")
        /// Image `cloudy_night_filled`.
        static let cloudy_night_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_night_filled")
        /// Image `cloudy_night`.
        static let cloudy_night = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy_night")
        /// Image `cloudy`.
        static let cloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/cloudy")
        /// Image `drizzle_filled`.
        static let drizzle_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle_filled")
        /// Image `drizzle_heavy_filled`.
        static let drizzle_heavy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle_heavy_filled")
        /// Image `drizzle_heavy`.
        static let drizzle_heavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle_heavy")
        /// Image `drizzle_light_filled`.
        static let drizzle_light_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle_light_filled")
        /// Image `drizzle_light`.
        static let drizzle_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle_light")
        /// Image `drizzle`.
        static let drizzle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/drizzle")
        /// Image `fog_day_filled`.
        static let fog_day_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/fog_day_filled")
        /// Image `fog_day`.
        static let fog_day = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/fog_day")
        /// Image `fog_night_filled`.
        static let fog_night_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/fog_night_filled")
        /// Image `fog_night`.
        static let fog_night = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/fog_night")
        /// Image `rain_filled`.
        static let rain_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain_filled")
        /// Image `rain_heavy_filled`.
        static let rain_heavy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain_heavy_filled")
        /// Image `rain_heavy`.
        static let rain_heavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain_heavy")
        /// Image `rain_light_filled`.
        static let rain_light_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain_light_filled")
        /// Image `rain_light`.
        static let rain_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain_light")
        /// Image `rain`.
        static let rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/rain")
        /// Image `snow_heavy_filled`.
        static let snow_heavy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/snow_heavy_filled")
        /// Image `snow_heavy`.
        static let snow_heavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/snow_heavy")
        /// Image `snow_light_filled`.
        static let snow_light_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/snow_light_filled")
        /// Image `snow_light`.
        static let snow_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/snow_light")
        /// Image `storm_heavy_filled`.
        static let storm_heavy_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_heavy_filled")
        /// Image `storm_heavy`.
        static let storm_heavy = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_heavy")
        /// Image `storm_light_filled`.
        static let storm_light_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_light_filled")
        /// Image `storm_light`.
        static let storm_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_light")
        /// Image `storm_rain_filled`.
        static let storm_rain_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_rain_filled")
        /// Image `storm_rain`.
        static let storm_rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/storm_rain")
        /// Image `tornado_filled`.
        static let tornado_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/tornado_filled")
        /// Image `tornado`.
        static let tornado = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon/weather/tornado")

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "clear_day", bundle: ..., traitCollection: ...)`
        static func clear_day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.clear_day, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "clear_day_filled", bundle: ..., traitCollection: ...)`
        static func clear_day_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.clear_day_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "clear_night", bundle: ..., traitCollection: ...)`
        static func clear_night(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.clear_night, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "clear_night_filled", bundle: ..., traitCollection: ...)`
        static func clear_night_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.clear_night_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloud_dash", bundle: ..., traitCollection: ...)`
        static func cloud_dash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloud_dash, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloud_dash_filled", bundle: ..., traitCollection: ...)`
        static func cloud_dash_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloud_dash_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloud_error", bundle: ..., traitCollection: ...)`
        static func cloud_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloud_error, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloud_error_filled", bundle: ..., traitCollection: ...)`
        static func cloud_error_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloud_error_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy", bundle: ..., traitCollection: ...)`
        static func cloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_day", bundle: ..., traitCollection: ...)`
        static func cloudy_day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_day, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_day_filled", bundle: ..., traitCollection: ...)`
        static func cloudy_day_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_day_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_filled", bundle: ..., traitCollection: ...)`
        static func cloudy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_heavy", bundle: ..., traitCollection: ...)`
        static func cloudy_heavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_heavy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_heavy_filled", bundle: ..., traitCollection: ...)`
        static func cloudy_heavy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_heavy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_night", bundle: ..., traitCollection: ...)`
        static func cloudy_night(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_night, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "cloudy_night_filled", bundle: ..., traitCollection: ...)`
        static func cloudy_night_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.cloudy_night_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle", bundle: ..., traitCollection: ...)`
        static func drizzle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle_filled", bundle: ..., traitCollection: ...)`
        static func drizzle_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle_heavy", bundle: ..., traitCollection: ...)`
        static func drizzle_heavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle_heavy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle_heavy_filled", bundle: ..., traitCollection: ...)`
        static func drizzle_heavy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle_heavy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle_light", bundle: ..., traitCollection: ...)`
        static func drizzle_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle_light, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "drizzle_light_filled", bundle: ..., traitCollection: ...)`
        static func drizzle_light_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.drizzle_light_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "fog_day", bundle: ..., traitCollection: ...)`
        static func fog_day(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.fog_day, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "fog_day_filled", bundle: ..., traitCollection: ...)`
        static func fog_day_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.fog_day_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "fog_night", bundle: ..., traitCollection: ...)`
        static func fog_night(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.fog_night, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "fog_night_filled", bundle: ..., traitCollection: ...)`
        static func fog_night_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.fog_night_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain", bundle: ..., traitCollection: ...)`
        static func rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain_filled", bundle: ..., traitCollection: ...)`
        static func rain_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain_heavy", bundle: ..., traitCollection: ...)`
        static func rain_heavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain_heavy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain_heavy_filled", bundle: ..., traitCollection: ...)`
        static func rain_heavy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain_heavy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain_light", bundle: ..., traitCollection: ...)`
        static func rain_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain_light, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "rain_light_filled", bundle: ..., traitCollection: ...)`
        static func rain_light_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.rain_light_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "snow_heavy", bundle: ..., traitCollection: ...)`
        static func snow_heavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.snow_heavy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "snow_heavy_filled", bundle: ..., traitCollection: ...)`
        static func snow_heavy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.snow_heavy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "snow_light", bundle: ..., traitCollection: ...)`
        static func snow_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.snow_light, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "snow_light_filled", bundle: ..., traitCollection: ...)`
        static func snow_light_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.snow_light_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_heavy", bundle: ..., traitCollection: ...)`
        static func storm_heavy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_heavy, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_heavy_filled", bundle: ..., traitCollection: ...)`
        static func storm_heavy_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_heavy_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_light", bundle: ..., traitCollection: ...)`
        static func storm_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_light, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_light_filled", bundle: ..., traitCollection: ...)`
        static func storm_light_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_light_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_rain", bundle: ..., traitCollection: ...)`
        static func storm_rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_rain, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "storm_rain_filled", bundle: ..., traitCollection: ...)`
        static func storm_rain_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.storm_rain_filled, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "tornado", bundle: ..., traitCollection: ...)`
        static func tornado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.tornado, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIImage(named: "tornado_filled", bundle: ..., traitCollection: ...)`
        static func tornado_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.icon.weather.tornado_filled, compatibleWith: traitCollection)
        }
        #endif

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `EBCityInfoView`.
    static let ebCityInfoView = _R.nib._EBCityInfoView()
    /// Nib `EBListEmptySetView`.
    static let ebListEmptySetView = _R.nib._EBListEmptySetView()
    /// Nib `EBMinMaxTemperatureInfoView`.
    static let ebMinMaxTemperatureInfoView = _R.nib._EBMinMaxTemperatureInfoView()
    /// Nib `EBNetworkEmptySetView`.
    static let ebNetworkEmptySetView = _R.nib._EBNetworkEmptySetView()
    /// Nib `EBTemperatureInfoView`.
    static let ebTemperatureInfoView = _R.nib._EBTemperatureInfoView()
    /// Nib `EBWeatherListHeaderView`.
    static let ebWeatherListHeaderView = _R.nib._EBWeatherListHeaderView()
    /// Nib `EBWeatherListItemCell`.
    static let ebWeatherListItemCell = _R.nib._EBWeatherListItemCell()
    /// Nib `EBWeatherSearchItemCell`.
    static let ebWeatherSearchItemCell = _R.nib._EBWeatherSearchItemCell()
    /// Nib `EBWindHumidityInfoView`.
    static let ebWindHumidityInfoView = _R.nib._EBWindHumidityInfoView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBCityInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebCityInfoView) instead")
    static func ebCityInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebCityInfoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBListEmptySetView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebListEmptySetView) instead")
    static func ebListEmptySetView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebListEmptySetView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBMinMaxTemperatureInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebMinMaxTemperatureInfoView) instead")
    static func ebMinMaxTemperatureInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebMinMaxTemperatureInfoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBNetworkEmptySetView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebNetworkEmptySetView) instead")
    static func ebNetworkEmptySetView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebNetworkEmptySetView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBTemperatureInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebTemperatureInfoView) instead")
    static func ebTemperatureInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebTemperatureInfoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBWeatherListHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebWeatherListHeaderView) instead")
    static func ebWeatherListHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebWeatherListHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBWeatherListItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebWeatherListItemCell) instead")
    static func ebWeatherListItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebWeatherListItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBWeatherSearchItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebWeatherSearchItemCell) instead")
    static func ebWeatherSearchItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebWeatherSearchItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EBWindHumidityInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ebWindHumidityInfoView) instead")
    static func ebWindHumidityInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ebWindHumidityInfoView)
    }
    #endif

    static func ebCityInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBCityInfoView? {
      return R.nib.ebCityInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBCityInfoView
    }

    static func ebListEmptySetView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBListEmptySetView? {
      return R.nib.ebListEmptySetView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBListEmptySetView
    }

    static func ebMinMaxTemperatureInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBMinMaxTemperatureInfoView? {
      return R.nib.ebMinMaxTemperatureInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBMinMaxTemperatureInfoView
    }

    static func ebNetworkEmptySetView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBNetworkEmptySetView? {
      return R.nib.ebNetworkEmptySetView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBNetworkEmptySetView
    }

    static func ebTemperatureInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBTemperatureInfoView? {
      return R.nib.ebTemperatureInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBTemperatureInfoView
    }

    static func ebWeatherListHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherListHeaderView? {
      return R.nib.ebWeatherListHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherListHeaderView
    }

    static func ebWeatherListItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherListItemCell? {
      return R.nib.ebWeatherListItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherListItemCell
    }

    static func ebWeatherSearchItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherSearchItemCell? {
      return R.nib.ebWeatherSearchItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherSearchItemCell
    }

    static func ebWindHumidityInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWindHumidityInfoView? {
      return R.nib.ebWindHumidityInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWindHumidityInfoView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EBWeatherListItemCell`.
    static let ebWeatherListItemCell: Rswift.ReuseIdentifier<EBWeatherListItemCell> = Rswift.ReuseIdentifier(identifier: "EBWeatherListItemCell")
    /// Reuse identifier `EBWeatherSearchItemCell`.
    static let ebWeatherSearchItemCell: Rswift.ReuseIdentifier<EBWeatherSearchItemCell> = Rswift.ReuseIdentifier(identifier: "EBWeatherSearchItemCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// en translation: Find the weather in your current location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let nsLocationAlwaysAndWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Find the weather in your current location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let nsLocationWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: My Weather
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)

      /// en translation: Find the weather in your current location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func nsLocationAlwaysAndWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationAlwaysAndWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationAlwaysAndWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: Find the weather in your current location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func nsLocationWhenInUseUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSLocationWhenInUseUsageDescription"
        }

        return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: My Weather
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 18 localization keys.
    struct localizable {
      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let action_cancel = Rswift.StringResource(key: "action_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Cannot add not city place into weather list.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_message_invalid_city = Rswift.StringResource(key: "error_message_invalid_city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let action_determine = Rswift.StringResource(key: "action_determine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let value_theme_dark = Rswift.StringResource(key: "value_theme_dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let action_delete = Rswift.StringResource(key: "action_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Icons by
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let title_icon = Rswift.StringResource(key: "title_icon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Invalid Operation
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_title_invalid_operation = Rswift.StringResource(key: "error_title_invalid_operation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let title_language = Rswift.StringResource(key: "title_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let value_theme_light = Rswift.StringResource(key: "value_theme_light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Network is unstable, please try again later.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_message_network = Rswift.StringResource(key: "error_message_network", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: New York / 10001,us
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let placeholder_weather_search = Rswift.StringResource(key: "placeholder_weather_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Search result not found.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_message_empty_search_result = Rswift.StringResource(key: "error_message_empty_search_result", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let action_setting = Rswift.StringResource(key: "action_setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let title_setting = Rswift.StringResource(key: "title_setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Theme
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let title_theme = Rswift.StringResource(key: "title_theme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: To enable access, tap Settings and turn on Location.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_message_permission_location = Rswift.StringResource(key: "error_message_permission_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Unable to access the Location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_title_permission_location = Rswift.StringResource(key: "error_title_permission_location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)
      /// en translation: Weather report list is empty.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static let error_message_empty_weather_list = Rswift.StringResource(key: "error_message_empty_weather_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "zh-Hant"], comment: nil)

      /// en translation: Cancel
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func action_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_cancel"
        }

        return NSLocalizedString("action_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cannot add not city place into weather list.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_message_invalid_city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_invalid_city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_invalid_city"
        }

        return NSLocalizedString("error_message_invalid_city", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func action_determine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_determine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_determine"
        }

        return NSLocalizedString("action_determine", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func value_theme_dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("value_theme_dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "value_theme_dark"
        }

        return NSLocalizedString("value_theme_dark", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func action_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_delete"
        }

        return NSLocalizedString("action_delete", bundle: bundle, comment: "")
      }

      /// en translation: Icons by
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func title_icon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_icon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_icon"
        }

        return NSLocalizedString("title_icon", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Operation
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_title_invalid_operation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_title_invalid_operation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_title_invalid_operation"
        }

        return NSLocalizedString("error_title_invalid_operation", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func title_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_language"
        }

        return NSLocalizedString("title_language", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func value_theme_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("value_theme_light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "value_theme_light"
        }

        return NSLocalizedString("value_theme_light", bundle: bundle, comment: "")
      }

      /// en translation: Network is unstable, please try again later.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_message_network(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_network", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_network"
        }

        return NSLocalizedString("error_message_network", bundle: bundle, comment: "")
      }

      /// en translation: New York / 10001,us
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func placeholder_weather_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_weather_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_weather_search"
        }

        return NSLocalizedString("placeholder_weather_search", bundle: bundle, comment: "")
      }

      /// en translation: Search result not found.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_message_empty_search_result(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_empty_search_result", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_empty_search_result"
        }

        return NSLocalizedString("error_message_empty_search_result", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func action_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_setting"
        }

        return NSLocalizedString("action_setting", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func title_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_setting"
        }

        return NSLocalizedString("title_setting", bundle: bundle, comment: "")
      }

      /// en translation: Theme
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func title_theme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_theme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_theme"
        }

        return NSLocalizedString("title_theme", bundle: bundle, comment: "")
      }

      /// en translation: To enable access, tap Settings and turn on Location.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_message_permission_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_permission_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_permission_location"
        }

        return NSLocalizedString("error_message_permission_location", bundle: bundle, comment: "")
      }

      /// en translation: Unable to access the Location
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_title_permission_location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_title_permission_location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_title_permission_location"
        }

        return NSLocalizedString("error_title_permission_location", bundle: bundle, comment: "")
      }

      /// en translation: Weather report list is empty.
      ///
      /// Locales: en, zh-Hans, zh-Hant
      static func error_message_empty_weather_list(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_message_empty_weather_list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_message_empty_weather_list"
        }

        return NSLocalizedString("error_message_empty_weather_list", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _EBListEmptySetView.validate()
      try _EBNetworkEmptySetView.validate()
      try _EBTemperatureInfoView.validate()
      try _EBWeatherListHeaderView.validate()
      try _EBWeatherListItemCell.validate()
      try _EBWeatherSearchItemCell.validate()
      try _EBWindHumidityInfoView.validate()
    }

    struct _EBCityInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EBCityInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBCityInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBCityInfoView
      }

      fileprivate init() {}
    }

    struct _EBListEmptySetView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EBListEmptySetView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBListEmptySetView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBListEmptySetView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/action/plus_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/action/plus_circle' is used in nib 'EBListEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/action/plus_circle_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/action/plus_circle_filled' is used in nib 'EBListEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash' is used in nib 'EBListEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash_filled' is used in nib 'EBListEmptySetView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBMinMaxTemperatureInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EBMinMaxTemperatureInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBMinMaxTemperatureInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBMinMaxTemperatureInfoView
      }

      fileprivate init() {}
    }

    struct _EBNetworkEmptySetView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EBNetworkEmptySetView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBNetworkEmptySetView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBNetworkEmptySetView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/action/synchronize_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/action/synchronize_circle' is used in nib 'EBNetworkEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/action/synchronize_circle_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/action/synchronize_circle_filled' is used in nib 'EBNetworkEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_error", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_error' is used in nib 'EBNetworkEmptySetView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_error_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_error_filled' is used in nib 'EBNetworkEmptySetView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBTemperatureInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EBTemperatureInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBTemperatureInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBTemperatureInfoView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/weather/cloud_dash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash' is used in nib 'EBTemperatureInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash_filled' is used in nib 'EBTemperatureInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBWeatherListHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EBWeatherListHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherListHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherListHeaderView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/general/pin_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/pin_filled' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wet' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wet_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wet_filled' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wind", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wind' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wind_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wind_filled' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash_filled' is used in nib 'EBWeatherListHeaderView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBWeatherListItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EBWeatherListItemCell

      let bundle = R.hostingBundle
      let identifier = "EBWeatherListItemCell"
      let name = "EBWeatherListItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherListItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherListItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/weather/cloud_dash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash' is used in nib 'EBWeatherListItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash_filled' is used in nib 'EBWeatherListItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBWeatherSearchItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = EBWeatherSearchItemCell

      let bundle = R.hostingBundle
      let identifier = "EBWeatherSearchItemCell"
      let name = "EBWeatherSearchItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWeatherSearchItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWeatherSearchItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/weather/cloud_dash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash' is used in nib 'EBWeatherSearchItemCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/weather/cloud_dash_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/weather/cloud_dash_filled' is used in nib 'EBWeatherSearchItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EBWindHumidityInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EBWindHumidityInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EBWindHumidityInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EBWindHumidityInfoView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/general/wet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wet' is used in nib 'EBWindHumidityInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wet_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wet_filled' is used in nib 'EBWindHumidityInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wind", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wind' is used in nib 'EBWindHumidityInfoView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/wind_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/wind_filled' is used in nib 'EBWindHumidityInfoView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try ebSetting.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try ebWeather.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct ebSetting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EBSettingRootViewController

      let bundle = R.hostingBundle
      let ebSettingRootViewController = StoryboardViewControllerResource<EBSettingRootViewController>(identifier: "EBSettingRootViewController")
      let name = "EBSetting"

      func ebSettingRootViewController(_: Void = ()) -> EBSettingRootViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ebSettingRootViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/general/cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/cross' is used in storyboard 'EBSetting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/cross_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/cross_filled' is used in storyboard 'EBSetting', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.ebSetting().ebSettingRootViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ebSettingRootViewController' could not be loaded from storyboard 'EBSetting' as 'EBSettingRootViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct ebWeather: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EBWeatherListViewController

      let bundle = R.hostingBundle
      let ebWeatherDetailViewController = StoryboardViewControllerResource<EBWeatherDetailViewController>(identifier: "EBWeatherDetailViewController")
      let ebWeatherListViewController = StoryboardViewControllerResource<EBWeatherListViewController>(identifier: "EBWeatherListViewController")
      let ebWeatherSearchViewController = StoryboardViewControllerResource<EBWeatherSearchViewController>(identifier: "EBWeatherSearchViewController")
      let name = "EBWeather"

      func ebWeatherDetailViewController(_: Void = ()) -> EBWeatherDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ebWeatherDetailViewController)
      }

      func ebWeatherListViewController(_: Void = ()) -> EBWeatherListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ebWeatherListViewController)
      }

      func ebWeatherSearchViewController(_: Void = ()) -> EBWeatherSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ebWeatherSearchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon/general/cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/cross' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/cross_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/cross_filled' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/gear' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/gear_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/gear_filled' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/pin' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon/general/pin_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon/general/pin_filled' is used in storyboard 'EBWeather', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.ebWeather().ebWeatherDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ebWeatherDetailViewController' could not be loaded from storyboard 'EBWeather' as 'EBWeatherDetailViewController'.") }
        if _R.storyboard.ebWeather().ebWeatherListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ebWeatherListViewController' could not be loaded from storyboard 'EBWeather' as 'EBWeatherListViewController'.") }
        if _R.storyboard.ebWeather().ebWeatherSearchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ebWeatherSearchViewController' could not be loaded from storyboard 'EBWeather' as 'EBWeatherSearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
